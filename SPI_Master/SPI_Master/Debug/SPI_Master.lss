
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000104  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000840  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000756  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000614c  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000101  00000000  00000000  00007a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00007b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000001ae  00000000  00000000  00007b89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e d0       	rcall	.+28     	; 0x94 <main>
  78:	43 c0       	rjmp	.+134    	; 0x100 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <SPIM_init>:
}
void SPIS_init ()
{
	DDRB &= ~(1<<6);
	SPCR = 0x43;
	SPSR = 0x00;
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	80 6b       	ori	r24, 0xB0	; 176
  80:	87 bb       	out	0x17, r24	; 23
  82:	83 e5       	ldi	r24, 0x53	; 83
  84:	8d b9       	out	0x0d, r24	; 13
  86:	1e b8       	out	0x0e, r1	; 14
  88:	08 95       	ret

0000008a <SPI_sendchar>:

}
void SPI_sendchar (uint8_t data)
{

	SPDR  = data;                   // PUT DATA INTO DATA REGISTER
  8a:	8f b9       	out	0x0f, r24	; 15
	while (  (SPSR && (1<<7)) ==0  );	// WAIT TILL TRANSSMISSION IS COMPLETE..
  8c:	8e b1       	in	r24, 0x0e	; 14
  8e:	88 23       	and	r24, r24
  90:	e9 f3       	breq	.-6      	; 0x8c <SPI_sendchar+0x2>
	
}
  92:	08 95       	ret

00000094 <main>:
#include "LCD4.h"
#include "SPI.h"


int main(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	2f 97       	sbiw	r28, 0x0f	; 15
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
	SPIM_init();
  a8:	e9 df       	rcall	.-46     	; 0x7c <SPIM_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	81 ee       	ldi	r24, 0xE1	; 225
  ac:	94 e0       	ldi	r25, 0x04	; 4
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x1a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x20>
  b4:	00 00       	nop
  b6:	7e 01       	movw	r14, r28
  b8:	90 e1       	ldi	r25, 0x10	; 16
  ba:	e9 0e       	add	r14, r25
  bc:	f1 1c       	adc	r15, r1
   _delay_ms(5);
    while (1) 
    {
	 char str [15] = {"SPI Initialized"};
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	e0 e6       	ldi	r30, 0x60	; 96
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	de 01       	movw	r26, r28
  c6:	11 96       	adiw	r26, 0x01	; 1
  c8:	01 90       	ld	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	8a 95       	dec	r24
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x34>
	//   char str [8] = "12345678";
	   PORTB &= ~(1<<4);
  d0:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x40>
  d4:	8e 01       	movw	r16, r28
  d6:	0f 5f       	subi	r16, 0xFF	; 255
  d8:	1f 4f       	sbci	r17, 0xFF	; 255
	   _delay_us(2);
		 for (unsigned char i = 0 ; i < 15 ; i ++)
		 {
			 
			SPI_sendchar(str[i]);
  da:	f8 01       	movw	r30, r16
  dc:	81 91       	ld	r24, Z+
  de:	8f 01       	movw	r16, r30
  e0:	d4 df       	rcall	.-88     	; 0x8a <SPI_sendchar>
  e2:	f1 e2       	ldi	r31, 0x21	; 33
  e4:	fa 95       	dec	r31
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x50>
  e8:	00 00       	nop
    {
	 char str [15] = {"SPI Initialized"};
	//   char str [8] = "12345678";
	   PORTB &= ~(1<<4);
	   _delay_us(2);
		 for (unsigned char i = 0 ; i < 15 ; i ++)
  ea:	0e 15       	cp	r16, r14
  ec:	1f 05       	cpc	r17, r15
  ee:	a9 f7       	brne	.-22     	; 0xda <main+0x46>
		 {
			 
			SPI_sendchar(str[i]);
			_delay_us(100);
		 }
		  PORTB |= (1<<4);
  f0:	c4 9a       	sbi	0x18, 4	; 24
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x62>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x68>
  fc:	00 00       	nop
		  _delay_us(1000);
		/* 	SPI_sendchar('0');s
		 	_delay_ms(1);
		 	SPI_sendchar('1');
		 	_delay_ms(1);*/
    }
  fe:	df cf       	rjmp	.-66     	; 0xbe <main+0x2a>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
